// Package songs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package songs

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSongs request
	GetSongs(ctx context.Context, params *GetSongsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSongWithBody request with any body
	CreateSongWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSong(ctx context.Context, body CreateSongJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSong request
	DeleteSong(ctx context.Context, songID int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSong request
	GetSong(ctx context.Context, songID int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSongWithBody request with any body
	UpdateSongWithBody(ctx context.Context, songID int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSong(ctx context.Context, songID int, body UpdateSongJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSongText request
	GetSongText(ctx context.Context, songID int, params *GetSongTextParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSongs(ctx context.Context, params *GetSongsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSongsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSongWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSongRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSong(ctx context.Context, body CreateSongJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSongRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSong(ctx context.Context, songID int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSongRequest(c.Server, songID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSong(ctx context.Context, songID int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSongRequest(c.Server, songID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSongWithBody(ctx context.Context, songID int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSongRequestWithBody(c.Server, songID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSong(ctx context.Context, songID int, body UpdateSongJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSongRequest(c.Server, songID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSongText(ctx context.Context, songID int, params *GetSongTextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSongTextRequest(c.Server, songID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSongsRequest generates requests for GetSongs
func NewGetSongsRequest(server string, params *GetSongsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/songs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Group != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Song != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "song", runtime.ParamLocationQuery, *params.Song); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Text != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, *params.Text); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Link != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "link", runtime.ParamLocationQuery, *params.Link); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSongRequest calls the generic CreateSong builder with application/json body
func NewCreateSongRequest(server string, body CreateSongJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSongRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSongRequestWithBody generates requests for CreateSong with any type of body
func NewCreateSongRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/songs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSongRequest generates requests for DeleteSong
func NewDeleteSongRequest(server string, songID int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "songID", runtime.ParamLocationPath, songID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/songs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSongRequest generates requests for GetSong
func NewGetSongRequest(server string, songID int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "songID", runtime.ParamLocationPath, songID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/songs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSongRequest calls the generic UpdateSong builder with application/json body
func NewUpdateSongRequest(server string, songID int, body UpdateSongJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSongRequestWithBody(server, songID, "application/json", bodyReader)
}

// NewUpdateSongRequestWithBody generates requests for UpdateSong with any type of body
func NewUpdateSongRequestWithBody(server string, songID int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "songID", runtime.ParamLocationPath, songID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/songs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSongTextRequest generates requests for GetSongText
func NewGetSongTextRequest(server string, songID int, params *GetSongTextParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "songID", runtime.ParamLocationPath, songID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/songs/%s/text", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSongsWithResponse request
	GetSongsWithResponse(ctx context.Context, params *GetSongsParams, reqEditors ...RequestEditorFn) (*GetSongsResponse, error)

	// CreateSongWithBodyWithResponse request with any body
	CreateSongWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSongResponse, error)

	CreateSongWithResponse(ctx context.Context, body CreateSongJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSongResponse, error)

	// DeleteSongWithResponse request
	DeleteSongWithResponse(ctx context.Context, songID int, reqEditors ...RequestEditorFn) (*DeleteSongResponse, error)

	// GetSongWithResponse request
	GetSongWithResponse(ctx context.Context, songID int, reqEditors ...RequestEditorFn) (*GetSongResponse, error)

	// UpdateSongWithBodyWithResponse request with any body
	UpdateSongWithBodyWithResponse(ctx context.Context, songID int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSongResponse, error)

	UpdateSongWithResponse(ctx context.Context, songID int, body UpdateSongJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSongResponse, error)

	// GetSongTextWithResponse request
	GetSongTextWithResponse(ctx context.Context, songID int, params *GetSongTextParams, reqEditors ...RequestEditorFn) (*GetSongTextResponse, error)
}

type GetSongsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Songs      *[]Song     `json:"songs,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSongsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSongsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSongResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Song
}

// Status returns HTTPResponse.Status
func (r CreateSongResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSongResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSongResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSongResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSongResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSongResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Song
}

// Status returns HTTPResponse.Status
func (r GetSongResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSongResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSongResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Song
}

// Status returns HTTPResponse.Status
func (r UpdateSongResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSongResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSongTextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Couplets   []string   `json:"couplets"`
		Pagination Pagination `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSongTextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSongTextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSongsWithResponse request returning *GetSongsResponse
func (c *ClientWithResponses) GetSongsWithResponse(ctx context.Context, params *GetSongsParams, reqEditors ...RequestEditorFn) (*GetSongsResponse, error) {
	rsp, err := c.GetSongs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSongsResponse(rsp)
}

// CreateSongWithBodyWithResponse request with arbitrary body returning *CreateSongResponse
func (c *ClientWithResponses) CreateSongWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSongResponse, error) {
	rsp, err := c.CreateSongWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSongResponse(rsp)
}

func (c *ClientWithResponses) CreateSongWithResponse(ctx context.Context, body CreateSongJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSongResponse, error) {
	rsp, err := c.CreateSong(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSongResponse(rsp)
}

// DeleteSongWithResponse request returning *DeleteSongResponse
func (c *ClientWithResponses) DeleteSongWithResponse(ctx context.Context, songID int, reqEditors ...RequestEditorFn) (*DeleteSongResponse, error) {
	rsp, err := c.DeleteSong(ctx, songID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSongResponse(rsp)
}

// GetSongWithResponse request returning *GetSongResponse
func (c *ClientWithResponses) GetSongWithResponse(ctx context.Context, songID int, reqEditors ...RequestEditorFn) (*GetSongResponse, error) {
	rsp, err := c.GetSong(ctx, songID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSongResponse(rsp)
}

// UpdateSongWithBodyWithResponse request with arbitrary body returning *UpdateSongResponse
func (c *ClientWithResponses) UpdateSongWithBodyWithResponse(ctx context.Context, songID int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSongResponse, error) {
	rsp, err := c.UpdateSongWithBody(ctx, songID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSongResponse(rsp)
}

func (c *ClientWithResponses) UpdateSongWithResponse(ctx context.Context, songID int, body UpdateSongJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSongResponse, error) {
	rsp, err := c.UpdateSong(ctx, songID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSongResponse(rsp)
}

// GetSongTextWithResponse request returning *GetSongTextResponse
func (c *ClientWithResponses) GetSongTextWithResponse(ctx context.Context, songID int, params *GetSongTextParams, reqEditors ...RequestEditorFn) (*GetSongTextResponse, error) {
	rsp, err := c.GetSongText(ctx, songID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSongTextResponse(rsp)
}

// ParseGetSongsResponse parses an HTTP response from a GetSongsWithResponse call
func ParseGetSongsResponse(rsp *http.Response) (*GetSongsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSongsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Songs      *[]Song     `json:"songs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSongResponse parses an HTTP response from a CreateSongWithResponse call
func ParseCreateSongResponse(rsp *http.Response) (*CreateSongResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSongResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Song
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSongResponse parses an HTTP response from a DeleteSongWithResponse call
func ParseDeleteSongResponse(rsp *http.Response) (*DeleteSongResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSongResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSongResponse parses an HTTP response from a GetSongWithResponse call
func ParseGetSongResponse(rsp *http.Response) (*GetSongResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSongResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Song
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSongResponse parses an HTTP response from a UpdateSongWithResponse call
func ParseUpdateSongResponse(rsp *http.Response) (*UpdateSongResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSongResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Song
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSongTextResponse parses an HTTP response from a GetSongTextWithResponse call
func ParseGetSongTextResponse(rsp *http.Response) (*GetSongTextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSongTextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Couplets   []string   `json:"couplets"`
			Pagination Pagination `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
